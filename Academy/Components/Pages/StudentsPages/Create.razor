@page "/students/create"
@using Microsoft.EntityFrameworkCore
@using Academy.Models
@inject IDbContextFactory<Academy.Models.Pv319ImportContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Students</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Students" OnValidSubmit="AddStudents" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="lastname" class="form-label">LastName:</label> 
                <InputText id="lastname" @bind-Value="Students.LastName" class="form-control" /> 
                <ValidationMessage For="() => Students.LastName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="firstname" class="form-label">FirstName:</label> 
                <InputText id="firstname" @bind-Value="Students.FirstName" class="form-control" /> 
                <ValidationMessage For="() => Students.FirstName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="middlename" class="form-label">MiddleName:</label> 
                <InputText id="middlename" @bind-Value="Students.MiddleName" class="form-control" /> 
                <ValidationMessage For="() => Students.MiddleName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="birthdate" class="form-label">BirthDate:</label> 
                <InputDate id="birthdate" @bind-Value="Students.BirthDate" class="form-control" /> 
                <ValidationMessage For="() => Students.BirthDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label> 
                <InputText id="email" @bind-Value="Students.Email" class="form-control" /> 
                <ValidationMessage For="() => Students.Email" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="phone" class="form-label">Phone:</label> 
                <InputText id="phone" @bind-Value="Students.Phone" class="form-control" /> 
                <ValidationMessage For="() => Students.Phone" class="text-danger" /> 
            </div>        
            @* <div class="mb-3">
                <label for="photo" class="form-label">Photo:</label> 
                <InputText id="photo" @bind-Value="Students.Photo" class="form-control" /> 
                <ValidationMessage For="() => Students.Photo" class="text-danger" /> 
            </div>         *@
            <div class="mb-3">
                <label for="group" class="form-label">Group:</label> 
                <InputNumber id="group" @bind-Value="Students.Group" class="form-control" /> 
                <ValidationMessage For="() => Students.Group" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/students">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Students Students { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddStudents()
    {
        using var context = DbFactory.CreateDbContext();
        context.Students.Add(Students);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/students");
    }
}
